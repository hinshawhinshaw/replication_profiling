##this script was written for a folder with three bedfiles (reads over known windows): timepoints at 0, 20, and 40m
##will need to modify pretty extensively (not operations, but inputs and column calls, etc) to use for other data
## get a list of the relevant files
file_list <- list.files(pattern = '.tmpcnt')

#loda data from file_list in
my.data <- lapply(file_list, read.csv,  sep = "\t")

##use merge to catenat/merge the data structures into a new one
merge_data <- merge(my.data[1],my.data[2])
merge_data <- merge (merge_data,my.data[3])

##remove rows with inf or nan
merge_data <- na.omit(merge_data)

##name columns in the merged file
colnames(merge_data) <- c("chr","start_block","end_block",file_list)

## write csv file with these measurements
write.csv(merge_data, file = "merged_binned.csv")

##remove blocks with less than 1/4 the expected number of reads given genome-wide average read density (perform separately for each sample)
merge_data <- merge_data[merge_data$"wt_00.tmpcnt" > (colSums(merge_data[4])/dim(merge_data)[1])/4,]
merge_data <- merge_data[merge_data$"wt_20.tmpcnt" > (colSums(merge_data[5])/dim(merge_data)[1])/4,]
merge_data <- merge_data[merge_data$"wt_40.tmpcnt" > (colSums(merge_data[6])/dim(merge_data)[1])/4,]

##normalize to total reads for each sampleto get reads/million
merge_data[,4:6] <- 1000000*(merge_data[,4:6]/colSums(merge_data[,c(4:6)]))

##make log2 matrix and compare
log2_ratios <- merge_data
log2_ratios[,4] = ((merge_data[,5])/(merge_data[,4]))
log2_ratios[,5] = ((merge_data[,6])/(merge_data[,4]))
log2_ratios <- log2_ratios[,colnames(log2_ratios)[1:5]]
colnames(log2_ratios)[4:5] <- c("A","B")

## add 1 to remove nonsensical log results, and then select only finite values for analysis
log2_ratios[4:5] <- log2_ratios[4:5]
log2_ratios <- log2_ratios[is.finite(log2_ratios$A),]
log2_ratios <- log2_ratios[is.finite(log2_ratios$B),]

##sort by chromosome and then by start position
log2_ratios <- log2_ratios[order(log2_ratios$"chr",log2_ratios$"start"),]

##get a list chromsomes, and then output the final row position for each chromosome
chromosomes <- c(levels(log2_ratios$chr))
last_entries <- vector()
for (i in 1:length(chromosomes)) {
last_entries[i] <- tail(which(log2_ratios$"chr" == chromosomes[i]),n=1)
}
last_entries <- as.matrix(rbind(0, data.frame(last_entries)))

##plot data for given chromosome given the coordinates from last_entries

plot_what <- 10

tmpx <- log2_ratios$start[(last_entries[plot_what]+1):last_entries[plot_what+1]]
tmpyA <- log2_ratios$A[(last_entries[plot_what]+1):last_entries[plot_what+1]]
tmpyB <- log2_ratios$B[(last_entries[plot_what]+1):last_entries[plot_what+1]]

plot(tmpx, tmpyA )
points(tmpx, tmpyB, col="blue")
lines(loess.smooth(tmpx, tmpyA, span=.025, evaluation=1000), col="black")
lines(loess.smooth(tmpx, tmpyB, span=.025, evaluation=1000), col="blue")
rm(tmpx)
rm(tmpyA)
rm(tmpyB)

##module that puts a red dot at the centromere
##expects list of CENs in gff format (from alistair) to be in the working directory
##expects of list of ORIs in gff format (from cerevisiae.oridb.org) to be in the working dir
##both files supplied as tsvs
##see /nfs/xray/sch/hinshaw/sequencing_data/20150528_replication_gerton/20150609_count matrices for the version i am testing with here

CENX <- mean(read.csv("CENS.gff", header = FALSE, sep = "\t")[plot_what,4],read.csv("CENS.gff", header = FALSE, sep = "\t")[plot_what,5])

ORISTMP1 <- which(read.csv("ORIS.gff", header = TRUE, sep = "\t")[,1] == plot_what)
ORISTMP2 <-read.csv("ORIS.gff", header = TRUE, sep = "\t")[ORISTMP1,2:3]
rm(ORISTMP1)
ORISX <- as.matrix(rowMeans(ORISTMP2))
rm(ORISTMP2)
ORISY <- vector(length=dim(ORISX)[1], mode = "integer")
ORISY[] <- 1.1

points(CENX, 1.105, col="red")
points(ORISX, ORISY, col="coral")








